import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useContext, useEffect, useState } from "react";
import Banner from "../components/banner";
import Card from "../components/card";
import useTrackLocation from "../hooks/use-track-location";
import { fetchCoffeeStores } from "../lib/coffee-stores";
import { ACTION_TYPES, StoreContext } from "../store/store-context";
import styles from "../styles/Home.module.css";

export interface ICoffeeStore {
  fsq_id: string;
  name: string;
  imgUrl: string;
  websiteUrl: string;
  neighbourhood: string;
  location: {
    address: string;
    address_extended: string;
    cross_street: string;
    region: string;
  };
}

interface IProps {
  coffeeStores: ICoffeeStore[];
}

const Home: NextPage<IProps> = ({ coffeeStores }) => {
  const { handleTrackLocation, locationErrorMsg, isFindingLocation } =
    useTrackLocation();
  const [error, setError] = useState<any>(null);

  const { dispatch, state } = useContext(StoreContext);

  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  };

  useEffect(() => {
    const fetchCoffeeStoresNearMe = async () => {
      if (state.latLong) {
        try {
          const res = await fetch(
            `/api/getCoffeeStoresByLocation?latLong=${
              state.latLong
            }&limit=${30}`
          );
          const coffeeStores = await res.json();
          console.log("====================================");
          console.log({ coffeeStores });
          console.log("====================================");
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: { coffeeStores: coffeeStores },
          });
          setError(null);
        } catch (error: any) {
          console.log({ error });
          setError(error.message);
        }
      }
    };
    fetchCoffeeStoresNearMe();
  }, [state.latLong, dispatch]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner
          buttonText={isFindingLocation ? "Locating..." : "View stores nearby"}
          handleOnClick={handleOnBannerBtnClick}
        />
        {locationErrorMsg && "Error: " + locationErrorMsg}
        {error && "Error: " + error}
        <div className={styles.heroImage}>
          <Image
            src="/static/hero-image.png"
            alt="Hero Image"
            width={700}
            height={400}
          />
        </div>
        {state.coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Stores Near Me</h2>
            <div className={styles.cardLayout}>
              {state.coffeeStores.map((store) => (
                <Card
                  key={store.fsq_id}
                  name={store.name}
                  imgUrl={store.imgUrl}
                  href={"/coffee-store/" + store.fsq_id}
                />
              ))}
            </div>
          </div>
        )}
        {coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Toronto stores</h2>
            <div className={styles.cardLayout}>
              {coffeeStores.map((store) => (
                <Card
                  key={store.fsq_id}
                  name={store.name}
                  imgUrl={store.imgUrl}
                  href={"/coffee-store/" + store.fsq_id}
                />
              ))}
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async (context) => {
  const coffeStores = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores: coffeStores,
    },
  };
};
